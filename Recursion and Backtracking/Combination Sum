/*
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T. 
The same repeated number may be chosen from C unlimited number of times.
*/

/*
Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The combinations themselves must be sorted in ascending order.
CombinationA > CombinationB iff (a1 > b1) OR (a1 = b1 AND a2 > b2) OR ... (a1 = b1 AND a2 = b2 AND ... ai = bi AND ai+1 > bi+1)
The solution set must not contain duplicate combinations.
*/

/*
Example, Given candidate set 2,3,6,7 and target 7, A solution set is:
[2, 2, 3]
[7]
*/





void addCombination(vector<vector<int>> &result,vector<int> &temp,vector<int> &A,int B,int sum,int start)
{
   if(sum==B)
   {
       result.push_back(temp);
       return;
   }
   while(start<A.size()&&sum+A[start]<=B)
   {
       temp.push_back(A[start]);
       sum=sum+A[start];
       addCombination(result,temp,A,B,sum,start);
       sum=sum-A[start];
       start++;
       temp.pop_back();
   }
    
}
vector<vector<int> > Solution::combinationSum(vector<int> &A, int B) {
    sort(A.begin(),A.end());
    vector<int> :: iterator ip;
    ip =unique(A.begin(),A.end()); 
    A.resize(distance(A.begin(), ip)); 
    vector<vector<int>> result;
    vector<int> temp;
    addCombination(result,temp,A,B,0,0);
    return result;
}

