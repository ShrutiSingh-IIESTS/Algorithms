/*
The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.
*/


/*
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively. For example, There exist two distinct solutions to the 4-queens puzzle:
[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
*/


bool isValid(int row,int c,map<int,bool> &cm,map<int,bool> &d1,map<int,bool> &d2)
{
    if(cm[c]==true||d1[(row+c)]==true||d2[(row-c)]==true)
        return false;
    return true;
}


void addPos(vector<vector<int>> &result,vector<int> &pos,map<int,bool> &cm,map<int,bool> &d1,map<int,bool> &d2,int row,int A)
{
    if(row==A)
    {
        result.push_back(pos);
        return;
    }
    for(int c=0;c<A;c++)
    {
        if(isValid(row,c,cm,d1,d2))
        {
            cm[c]=true;
            d1[(row+c)]=true;
            d2[(row-c)]=true;
            pos[row]=c;
            addPos(result,pos,cm,d1,d2,row+1,A);
            cm[c]=false;
            d1[(row+c)]=false;
            d2[(row-c)]=false;
        }
    }
    return;
}

vector<vector<string> > Solution::solveNQueens(int A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    map<int,bool> cm;
    map<int,bool> d1;
    map<int,bool> d2;
    vector<int> pos(A);
    vector<vector<int>>result;
    int row=0;
    addPos(result,pos,cm,d1,d2,row,A);
    vector<vector<string>> ans;
    for(int k=0;k<result.size();k++)
    {
        vector<int> temp=result[k];
        vector<string> s;
        for(int r=0;r<A;r++)
        {
            string s1="";
            for(int c=0;c<A;c++)
            {
                if(temp[r]==c)
                {
                    s1=s1+'Q';
                    //cout<<i<<" "<<j<<",";
                }
                else
                {
                    s1=s1+'.';
                }
            }
            s.push_back(s1);
        }
        ans.push_back(s);
    }
    
    return ans;
    
}
