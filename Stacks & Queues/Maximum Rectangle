/*
Given a 2D binary matrix of integers A containing 0's and 1's of size N x M. Find the largest rectangle containing only 1's and return its area. Note: Rows are numbered from top to bottom and columns are numbered from left to right. 
*/

/*
Input Format
The only argument given is the integer matrix A.
Output Format
Return the area of the largest rectangle containing only 1's.
Constraints
1 <= N, M <= 1000
0 <= A[i] <= 1
For Example
Input 1:
    A = [   [0, 0, 1]
            [0, 1, 1]
            [1, 1, 1]   ]
Output 1:
    4

Input 2:
    A = [   [0, 1, 0, 1]
            [1, 0, 1, 0]    ]
Output 2:
    1

*/


void findLeft_small(vector<vector<int>> &A,vector<int> &l_small,int r,int m)
{
    stack<int> s;
    for(int i=m-1;i>=0;i--)
    {
        if(s.empty())
        {
            s.push(i);
        }
        else if(A[r][i]>=A[r][s.top()])
        {
            s.push(i);
        }
        else
        {
            while(!s.empty()&&A[r][s.top()]>A[r][i])
            {
                int ind=s.top();
                l_small[ind]=i;
                s.pop();
            }
            s.push(i);
        }
    }
    while(!s.empty())
    {
        int ind=s.top();
        l_small[ind]=-1;
        s.pop();
    }
}

void findRight_small(vector<vector<int>> &A,vector<int> &r_small,int r,int m)
{
    stack<int> s;
    for(int i=0;i<m;i++)
    {
        if(s.empty())
        {
            s.push(i);
        }
        else if(A[r][i]>=A[r][s.top()])
        {
            s.push(i);
        }
        else
        {
            while(!s.empty()&&A[r][s.top()]>A[r][i])
            {
                int ind=s.top();
                r_small[ind]=i;
                s.pop();
            }
            s.push(i);
        }
    }
    while(!s.empty())
    {
        int ind=s.top();
        r_small[ind]=m;
        s.pop();
    }
}



int Solution::solve(vector<vector<int> > &A) {
    int n=A.size();
    int m=A[0].size();
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(A[i][j]!=0)
                A[i][j]=A[i][j]+A[i-1][j];
        }
    }
    int max_area=0;
    for(int i=0;i<n;i++)
    {
        vector<int> l_small(m);
        vector<int> r_small(m);
        findLeft_small(A,l_small,i,m);
        findRight_small(A,r_small,i,m);
        int ans=0;
        for(int j=0;j<m;j++)
        {
            int width=r_small[j]-l_small[j]-1;
            int area=A[i][j]*width;
            if(area>ans)
                ans=area;
        }
        if(ans>max_area)
            max_area=ans;
    }
    return max_area;
}