/*
Given a string A denoting an expression. It contains the following operators '+', '-', '*', '/'. Chech whether A has redundant braces or not. Return 1 if A has redundant braces, else return 0. Note: A will be always a valid expression. 
*/

/*
Input Format
The only argument given is string A.
Output Format
Return 1 if string has redundant braces, else return 0.
For Example
Input 1:
    A = "((a + b))"
Output 1:
    1
    Explanation 1:
        ((a + b)) has redundant braces so answer will be 1.

Input 2:
    A = "(a + (a + b))"
Output 2:
    0
    Explanation 2:
        (a + (a + b)) doesn't have have any redundant braces so answer will be 0.
*/


int Solution::braces(string A) {
    int n=A.length();
    stack<int> s;
    for(int i=0;i<n;i++)
    {
        if(A[i]=='(')
        {
            s.push(i);
        }
        else if(A[i]==')')
        {
            if(i!=n-1&&A[i+1]==')')
            {
                int r=s.top();
                s.pop();
                int l=s.top();
                if(r==l+1||(i-r)<=2)
                    return 1;
                i++;
            }
            else
            {
                int l=s.top();
                s.pop();
                if((i-l)<=2)
                    return 1;
            }
        }
    }
    return 0;
}