/*
Given an array of integers A. There is a sliding window of size B which is moving from the very left of the array to the very right. You can only see the w numbers in the window. Each time the sliding window moves rightwards by one position. You have to find the maximum for each window. 
*/

/*
Input Format
The first argument given is the integer array A.
The second argument given is the integer B.
Output Format
Return an array C, where C[i] is the maximum value of from A[i] to A[i+B-1]
For Example
Input 1:
    A = [1, 3, -1, -3, 5, 3, 6, 7]
    B = 3
Output 1:
    C = [3, 3, 5, 5, 6, 7]
*/


vector<int> Solution::slidingMaximum(const vector<int> &A, int B) {
    int n=A.size();
    int i=0;
    deque<int> q;
    vector<int> ans;
    while(i<B&&i<n)
    {
        if(q.empty())
            q.push_back(i);
        else if(A[i]>A[q.back()])
        {
           while(!q.empty()&&A[i]>A[q.back()])
                q.pop_back();
            q.push_back(i);
        }
        else
        {
            q.push_back(i);
        }
        i++;
    }
    ans.push_back(A[q.front()]);
    while(i<n)
    {
        if(A[i]>A[q.back()])
        {
            while(!q.empty()&&A[i]>A[q.back()])
                q.pop_back();
            q.push_back(i);
            if((q.back()-q.front())>=B)
                q.pop_front();
        }
        else
        {
            q.push_back(i);
            if((q.back()-q.front())>=B)
                q.pop_front();
        }
        ans.push_back(A[q.front()]);
        i++;
    }
    return ans;
}